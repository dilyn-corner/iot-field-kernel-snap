name: sl1640-kernel
adopt-info: kernel
build-base: core22
type: kernel
grade: devel
confinement: strict
summary: An Ubuntu Core kernel for the Synaptics SL1640 SoC
license: "CC-BY-SA-4.0 AND GPL-2.0"
issues: https://github.com/canonical/iot-field-kernel-snap/issues
website: https://github.com/canonical/iot-field-kernel-snap/tree/22-arm64-sl1640
description: |
  This snap provides the kernel image, modules, and firmware blobs for running
  the Synaptics SL1640 SoC..

  ** Note that the license information of this snap is incomplete **
  Do your due diligence to ensure compliance with the licenses of the contents of this snap.

  The snapcraft.yaml is licensed under CC-BY-SA-4.0

  You can find many licenses for the contents of this snap at the following locations:

  All provided: licenses/

architectures:
  - build-on:  [amd64]
    build-for: [arm64]

# Any additional repositories required.
# For instance, if you are building on AMD64 for ARM64,
package-repositories:
  - type: apt
    components: [main]
    architectures: [$CRAFT_ARCH_BUILD_FOR]
    suites: [jammy, jammy-security, jammy-updates]
    key-id: F6ECB3762474EDA9D21B7022871920D1991BC93C
    url: http://ports.ubuntu.com/ubuntu-ports

parts:
  trim-firmware:
    plugin: dump
    source: https://git.launchpad.net/canonical-kernel-snaps
    source-depth: 1
    source-type: git
    prime:
      - -*

  kernel:
    after: [trim-firmware]
    plugin: kernel
    source: https://git.launchpad.net/~dilyn-corner/+git/linux-kernel
    source-depth: 1
    source-type: git
    source-branch: syna-jammy
    build-packages:
      - on arm64:
        - gcc
      - on amd64:
        - gcc-${CRAFT_ARCH_TRIPLET_BUILD_FOR}
    kernel-kconfigflavour: generic
    kernel-kdefconfig: [snappy_sl1640_defconfig]
    stage-packages:
      - linux-firmware:all
      - wireless-regdb:all
    override-build: |
      craftctl default

      # Using the directory name in the lib/modules directory captures the
      # kernel version adequately.
      kver="$(basename "${CRAFT_PART_INSTALL}/lib/modules/"*)"
      craftctl set version="$kver"

      cp -rf "${CRAFT_PART_SRC}/firmware/" "${CRAFT_PART_INSTALL}/bsp-firmware"
    override-prime: |
      craftctl default

      "${CRAFT_STAGE}/trim-firmware" "${CRAFT_PRIME}"

      cp -rf "${CRAFT_STAGE}/bsp-firmware/"* "${CRAFT_PRIME}/firmware"
    prime:
      - dtbs/
      - firmware/
      - lib/
      - modules/

  modules:
    after: [kernel]
    plugin: nil
    source: https://github.com/synaptics-astra/linux_5_15-modules
    source-depth: 1
    source-type: git
    source-branch: kirkstone_5.15_v1.7.0
    build-environment:
      - KERNEL_SRC: "${CRAFT_PART_BUILD}/../../kernel/build"
      - sm_symbols: drivers/soc/berlin/modules/sm/Module.symvers
      - on amd64:
        - ARCH: "${CRAFT_ARCH_BUILD_FOR}"
        - CROSS_COMPILE: "${CRAFT_ARCH_TRIPLET_BUILD_FOR}-"
    override-build: |
      for dir in bluetooth/lpm                  \
                 bluetooth/rfkill               \
                 soc/berlin/berlin-chipid       \
                 hwmon/syna-hwmon               \
                 i2c/muxes/i2c-dyndmx-pinctrl   \
                 input/keyboard/berlin-ir       \
                 net/phy/sunplus                \
                 pci/controller/dwc/pcie-berlin \
                 phy/synaptics/phy-berlin-pcie  \
                 phy/synaptics/phy-syna-usb     \
                 regulator/hl7593               \
                 regulator/rt5739               \
                 regulator/tps6286x             \
                 soc/berlin/berlin-chipid       \
                 soc/berlin/modules/axi_meter   \
                 soc/berlin/modules/sm          \
                 usb/dwc3/dwc3-syna; do
        _dir="${CRAFT_PART_BUILD}/drivers/${dir}"
        cd "${_dir}"

        case "$dir" in
          *berlin-ir) make -C "${KERNEL_SRC}" M="${PWD}" \
                      KBUILD_EXTRA_SYMBOLS="${_dir}/${sm_symbols}" ;;
          *)          make -C "${KERNEL_SRC}" M="${PWD}"           ;;
        esac

        make -C "${KERNEL_SRC}" M="${PWD}" INSTALL_MOD_STRIP=1 \
                INSTALL_MOD_PATH="${CRAFT_STAGE}" modules_install
        cd -
      done

    override-stage: |
      kver="$(basename "${CRAFT_STAGE}/lib/modules/"*)"

      depmod -a -b "${CRAFT_STAGE}" "${kver}"

  initrd:
    after: [kernel, modules, trim-firmware]
    plugin: initrd
    initrd-build-efi-image: false
    build-snaps: [core22/latest/stable]
    prime:
      - -initrd.img-*

  fit-image:
    after: [kernel, initrd]
    plugin: dump
    source: fit-image/
    build-packages: [u-boot-tools, device-tree-compiler]
    override-stage: |
      craftctl default

      mkimage \
        -f "${CRAFT_STAGE}/fitImage_${CRAFT_ARCH_BUILD_FOR}.its" \
        "${CRAFT_PRIME}/kernel.img"
    prime:
      - -*
